digraph "classes_SER" {
rankdir=BT
charset="utf-8"
"SER.ui.color_list.ColorList" [color="black", fontcolor="black", label=<{ColorList|list_widget<br ALIGN="LEFT"/>|add_item(label)<br ALIGN="LEFT"/>clean_list()<br ALIGN="LEFT"/>set_color(index: int, color: QColor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.component.Component" [color="black", fontcolor="black", label=<{Component|conf_ui<br ALIGN="LEFT"/>instrument<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SER.ui.components_dialog.ComponentConfigWidget" [color="black", fontcolor="black", label=<{ComponentConfigWidget|component<br ALIGN="LEFT"/>folder : str<br ALIGN="LEFT"/>load_button<br ALIGN="LEFT"/>name_label<br ALIGN="LEFT"/>save_button<br ALIGN="LEFT"/>|load_configuration()<br ALIGN="LEFT"/>save_configuration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.component.ComponentInitialization" [color="black", fontcolor="black", label=<{ComponentInitialization|component<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SER.ui.components_dialog.ComponentsDialog" [color="black", fontcolor="black", label=<{ComponentsDialog|button_box<br ALIGN="LEFT"/>components_layout<br ALIGN="LEFT"/>components_widgets : dict[str, ComponentConfigWidget]<br ALIGN="LEFT"/>folder : str<br ALIGN="LEFT"/>load_run_button<br ALIGN="LEFT"/>load_sequence_button<br ALIGN="LEFT"/>process_manager<br ALIGN="LEFT"/>save_run_button<br ALIGN="LEFT"/>save_sequence_button<br ALIGN="LEFT"/>|load_run_configuration()<br ALIGN="LEFT"/>load_sequence()<br ALIGN="LEFT"/>save_run_configuration()<br ALIGN="LEFT"/>save_sequence()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.instrument.ConfigurableInstrument" [color="black", fontcolor="black", label=<{ConfigurableInstrument|coupling : int<br ALIGN="LEFT"/>|<I>configure</I>(): Dict[str, Any]<br ALIGN="LEFT"/>get_config(): Dict<br ALIGN="LEFT"/><I>get_points</I>(): Generator[Tuple, None, None]<br ALIGN="LEFT"/><I>point_amount</I>(): int<br ALIGN="LEFT"/>set_config(config: Dict)<br ALIGN="LEFT"/>set_coupling(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.user_interface.ConfigurationUI" [color="black", fontcolor="black", label=<{ConfigurationUI|gui : Union[str, tuple]<br ALIGN="LEFT"/>instrument<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>logger_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SER.ui.coupling_ui.CouplingUI" [color="black", fontcolor="black", label=<{CouplingUI|labels : list<br ALIGN="LEFT"/>sboxes : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SER.model.data_repository.DataRepository" [color="black", fontcolor="black", label=<{DataRepository|data : List[Dict[str, Dict[str, Any]]]<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>run_number : int<br ALIGN="LEFT"/>|add_datum(name: str, datum: Dict[str, Any])<br ALIGN="LEFT"/>get_datum_index(index)<br ALIGN="LEFT"/>last_datum()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>next_run()<br ALIGN="LEFT"/>to_csv(filename: str)<br ALIGN="LEFT"/>to_dataframe(): pd.DataFrame<br ALIGN="LEFT"/>to_internal_repr(): List[Dict[str, Dict[str, Any]]]<br ALIGN="LEFT"/>to_matlab(filename: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.model.dispatcher.Dispatcher" [color="black", fontcolor="black", label=<{Dispatcher|logger : NoneType, RootLogger<br ALIGN="LEFT"/>tasks : List[Tuple[Callable, Tuple]]<br ALIGN="LEFT"/>|add_task(fun: Callable, args)<br ALIGN="LEFT"/>execute(): Collection[Tuple[str, Dict[str, Any]]]<br ALIGN="LEFT"/>wrap(fun: Callable): Callable<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.model.runner.ExperimentRunner" [color="black", fontcolor="black", label=<{ExperimentRunner|arg_tracker<br ALIGN="LEFT"/>conf_comp : Collection[ComponentInitialization]<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>dispatcher<br ALIGN="LEFT"/>error : Exception, NoneType<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>observe_comp : Collection[ComponentInitialization]<br ALIGN="LEFT"/>stopped : bool<br ALIGN="LEFT"/>|point_amount(): int<br ALIGN="LEFT"/>run_experiment(point_callback: Callable)<br ALIGN="LEFT"/>setup_arg_tracker()<br ALIGN="LEFT"/>wrap_fun(name, fun)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.model.sequencer.ExperimentSequencer" [color="black", fontcolor="black", label=<{ExperimentSequencer|components : dict[str, Instrument]<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>sequence : list[dict[str, dict]]<br ALIGN="LEFT"/>stopped : bool<br ALIGN="LEFT"/>|add_run()<br ALIGN="LEFT"/>load_sequence(sequence)<br ALIGN="LEFT"/>start_sequence(run_callback: Callable[[], Any], point_callback: Callable)<br ALIGN="LEFT"/>stop(premature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.user_interface.FinalDataUI" [color="black", fontcolor="black", label=<{FinalDataUI|instrument<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>logger_name : str<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|<I>set_data</I>(data: List[Dict[str, Dict[str, Any]]])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.instrument.Instrument" [color="black", fontcolor="black", label=<{Instrument|logger : NoneType, RootLogger<br ALIGN="LEFT"/>logger_name : str<br ALIGN="LEFT"/>|<I>get_config</I>(): Dict<br ALIGN="LEFT"/><I>set_config</I>(config: Dict): None<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/><I>variable_documentation</I>(): Dict[str, str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.ui.localization.Localizator" [color="black", fontcolor="black", label=<{Localizator|locale_dict : dict[str, str]<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>|get(key: str): str<br ALIGN="LEFT"/>set(locale, file_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.ui.main_window.MainWidget" [color="black", fontcolor="black", label=<{MainWidget|add_run_button<br ALIGN="LEFT"/>components : Collection[ComponentInitialization]<br ALIGN="LEFT"/>conf_box<br ALIGN="LEFT"/>conf_layout<br ALIGN="LEFT"/>conf_page<br ALIGN="LEFT"/>configuration_dialog<br ALIGN="LEFT"/>coupling_config<br ALIGN="LEFT"/>data_box<br ALIGN="LEFT"/>data_layout<br ALIGN="LEFT"/>data_model<br ALIGN="LEFT"/>data_page<br ALIGN="LEFT"/>data_save_csv_button<br ALIGN="LEFT"/>data_save_docs_htm_button<br ALIGN="LEFT"/>data_save_docs_mkd_button<br ALIGN="LEFT"/>data_save_mat_button<br ALIGN="LEFT"/>data_table<br ALIGN="LEFT"/>error : NoneType<br ALIGN="LEFT"/>final_data_ui : Collection[FinalDataUI]<br ALIGN="LEFT"/>load_conf_button<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>out_folder : str<br ALIGN="LEFT"/>progress_bar<br ALIGN="LEFT"/>progress_box<br ALIGN="LEFT"/>progress_label<br ALIGN="LEFT"/>progress_manager<br ALIGN="LEFT"/>run_box<br ALIGN="LEFT"/>run_data_ui : Collection[ProcessDataUI]<br ALIGN="LEFT"/>run_layout<br ALIGN="LEFT"/>run_list_widget<br ALIGN="LEFT"/>run_page<br ALIGN="LEFT"/>run_stop_button<br ALIGN="LEFT"/>run_thread : Thread<br ALIGN="LEFT"/>sequence_ended<br ALIGN="LEFT"/>sequencer<br ALIGN="LEFT"/>stack_widget<br ALIGN="LEFT"/>start_button<br ALIGN="LEFT"/>started : bool<br ALIGN="LEFT"/>timer_started : bool<br ALIGN="LEFT"/>|add_run()<br ALIGN="LEFT"/>export_docs_to_htm()<br ALIGN="LEFT"/>export_docs_to_md()<br ALIGN="LEFT"/>export_to_csv()<br ALIGN="LEFT"/>export_to_matlab()<br ALIGN="LEFT"/>load_config_gui(conf_folder: str, coupling_ui_options: dict[str, Any])<br ALIGN="LEFT"/>load_data_gui()<br ALIGN="LEFT"/>load_run_gui()<br ALIGN="LEFT"/>run_experiment()<br ALIGN="LEFT"/>sequence_end()<br ALIGN="LEFT"/>start_experiment()<br ALIGN="LEFT"/>stop_experiment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.model.gen.MetaArgTracker" [color="black", fontcolor="black", label=<{MetaArgTracker|started : bool<br ALIGN="LEFT"/>stopped : bool<br ALIGN="LEFT"/>trackers : List[MultipleArgTracker]<br ALIGN="LEFT"/>|advance(): bool<br ALIGN="LEFT"/>points_amount(): int<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.model.gen.MultipleArgTracker" [color="black", fontcolor="black", label=<{MultipleArgTracker|functions : List[Callable]<br ALIGN="LEFT"/>gen_fun : List[Callable[[], Generator]]<br ALIGN="LEFT"/>generators : List[Tuple[Generator, Callable]]<br ALIGN="LEFT"/>next : Callable<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|advance()<br ALIGN="LEFT"/>amount(): int<br ALIGN="LEFT"/>reset_generators()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.instrument.ObservableInstrument" [color="black", fontcolor="black", label=<{ObservableInstrument|<br ALIGN="LEFT"/>|<I>observe</I>(): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.user_interface.ProcessDataUI" [color="black", fontcolor="black", label=<{ProcessDataUI|instrument<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>logger_name : str<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|<I>add_data</I>(data: List[Dict[str, Dict[str, Any]]])<br ALIGN="LEFT"/><I>initialize</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.ui.process_ui_manager.ProcessUIManager" [color="black", fontcolor="black", label=<{ProcessUIManager|data<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>process_uis : Collection[ProcessDataUI]<br ALIGN="LEFT"/>progress_list : list[dict]<br ALIGN="LEFT"/>progress_lock<br ALIGN="LEFT"/>progress_tracker<br ALIGN="LEFT"/>run_list<br ALIGN="LEFT"/>run_number : int<br ALIGN="LEFT"/>run_started<br ALIGN="LEFT"/>running : bool<br ALIGN="LEFT"/>sequencer<br ALIGN="LEFT"/>|add_run(run: object)<br ALIGN="LEFT"/>load_sequence(sequence)<br ALIGN="LEFT"/>point_add()<br ALIGN="LEFT"/>run_start()<br ALIGN="LEFT"/>screen_tick()<br ALIGN="LEFT"/>sequence()<br ALIGN="LEFT"/>stop(premature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.ui.progress_tracker.ProgressTracker" [color="black", fontcolor="black", label=<{ProgressTracker|amount : int<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>point_amount : Callable[[], int]<br ALIGN="LEFT"/>progress_bar<br ALIGN="LEFT"/>progress_label<br ALIGN="LEFT"/>start_time : NoneType, datetime<br ALIGN="LEFT"/>|advance(amount)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.ui.data_table.TableModel" [color="black", fontcolor="black", label=<{TableModel|<br ALIGN="LEFT"/>|columnCount(parent)<br ALIGN="LEFT"/>data(index, role)<br ALIGN="LEFT"/>headerData(col, orientation, role)<br ALIGN="LEFT"/>rowCount(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SER.interfaces.instrument.ConfigurableInstrument" -> "SER.interfaces.instrument.Instrument" [arrowhead="empty", arrowtail="none"];
"SER.interfaces.instrument.ObservableInstrument" -> "SER.interfaces.instrument.Instrument" [arrowhead="empty", arrowtail="none"];
"SER.interfaces.component.ComponentInitialization" -> "SER.ui.components_dialog.ComponentConfigWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="component", style="solid"];
"SER.interfaces.instrument.Instrument" -> "SER.interfaces.component.Component" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instrument", style="solid"];
"SER.interfaces.instrument.Instrument" -> "SER.interfaces.user_interface.ConfigurationUI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instrument", style="solid"];
"SER.interfaces.instrument.Instrument" -> "SER.interfaces.user_interface.FinalDataUI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instrument", style="solid"];
"SER.interfaces.instrument.Instrument" -> "SER.interfaces.user_interface.ProcessDataUI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instrument", style="solid"];
"SER.interfaces.user_interface.ConfigurationUI" -> "SER.interfaces.component.Component" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conf_ui", style="solid"];
"SER.model.data_repository.DataRepository" -> "SER.model.sequencer.ExperimentSequencer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"SER.model.dispatcher.Dispatcher" -> "SER.model.runner.ExperimentRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dispatcher", style="solid"];
"SER.model.gen.MetaArgTracker" -> "SER.model.runner.ExperimentRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arg_tracker", style="solid"];
"SER.model.runner.ExperimentRunner" -> "SER.model.sequencer.ExperimentSequencer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="runner", style="solid"];
"SER.ui.color_list.ColorList" -> "SER.ui.process_ui_manager.ProcessUIManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="run_list", style="solid"];
"SER.ui.components_dialog.ComponentsDialog" -> "SER.ui.main_window.MainWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="configuration_dialog", style="solid"];
"SER.ui.coupling_ui.CouplingUI" -> "SER.ui.main_window.MainWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coupling_config", style="solid"];
"SER.ui.data_table.TableModel" -> "SER.ui.main_window.MainWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_model", style="solid"];
"SER.ui.process_ui_manager.ProcessUIManager" -> "SER.ui.main_window.MainWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="progress_manager", style="solid"];
"SER.interfaces.component.Component" -> "SER.interfaces.component.ComponentInitialization" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="component", style="solid"];
"SER.model.data_repository.DataRepository" -> "SER.model.runner.ExperimentRunner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"SER.model.sequencer.ExperimentSequencer" -> "SER.ui.main_window.MainWidget" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="sequencer", style="solid"];
"SER.model.sequencer.ExperimentSequencer" -> "SER.ui.process_ui_manager.ProcessUIManager" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="sequencer", style="solid"];
"SER.ui.process_ui_manager.ProcessUIManager" -> "SER.ui.components_dialog.ComponentsDialog" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="process_manager", style="solid"];
"SER.ui.progress_tracker.ProgressTracker" -> "SER.ui.process_ui_manager.ProcessUIManager" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="progress_tracker", style="solid"];
"SER.ui.components_dialog.ComponentConfigWidget" -> "SER.ui.components_dialog.ComponentsDialog" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="component_widgets", style="solid"];
"SER.model.gen.MultipleArgTracker" -> "SER.model.gen.MetaArgTracker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="component_widgets", style="solid"];
}

